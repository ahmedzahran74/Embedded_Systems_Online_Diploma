
lesson4_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000858  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000988  08000988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000994  08000994  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000994  08000994  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000994  08000994  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000994  08000994  00010994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000998  08000998  00010998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800099c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000004  080009a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080009a0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002379  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000587  00000000  00000000  000223a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  00022930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  00022a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000006f5  00000000  00000000  00022b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001383  00000000  00000000  0002320d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008e03  00000000  00000000  00024590  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002d393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000310  00000000  00000000  0002d410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000970 	.word	0x08000970

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000970 	.word	0x08000970

08000170 <EXTI_GPIO_Inite>:
 * @return value			-none
 * Note						-STM32f103 has A,B,C,D,E ports
 * 							 but LQFP48 only has A,B and part of C,D
 ********************************************/
void EXTI_GPIO_Inite(EXTI_Pin_Cfg_t* EXTI_Cfg)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	//configure the pin in input mode
	GPIO_pin_configue_t Pin_cfg;
	Pin_cfg.GPIO_pin_number=EXTI_Cfg->EXTI_pin.Pin_number;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	723b      	strb	r3, [r7, #8]
	Pin_cfg.GPIO_pin_mode=GPIO_MODE_INPUT;
 800017e:	2300      	movs	r3, #0
 8000180:	727b      	strb	r3, [r7, #9]
	Pin_cfg.GPIO_pin_CNF=GPIO_IN_FLOATING;
 8000182:	2301      	movs	r3, #1
 8000184:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Cfg->EXTI_pin.GPIOx,&Pin_cfg);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f107 0208 	add.w	r2, r7, #8
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fa41 	bl	8000618 <MCAL_GPIO_Init>

	//select the pin by using the AFIO register
	uint8_t Reg;		//it holds the AFIO_EXTICR required register number
	uint8_t Position;	//it holds the register position
	Reg=EXTI_Cfg->EXTI_pin.Pin_number/4;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	089b      	lsrs	r3, r3, #2
 800019c:	73fb      	strb	r3, [r7, #15]
	Position=(EXTI_Cfg->EXTI_pin.Pin_number%4)*4;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	f003 0303 	and.w	r3, r3, #3
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	73bb      	strb	r3, [r7, #14]
	CLEAR_BITS(AFIO->EXTICR[Reg],Position,4);
 80001ac:	4a50      	ldr	r2, [pc, #320]	; (80002f0 <EXTI_GPIO_Inite+0x180>)
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	3302      	adds	r3, #2
 80001b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80001b6:	7bbb      	ldrb	r3, [r7, #14]
 80001b8:	220f      	movs	r2, #15
 80001ba:	fa02 f303 	lsl.w	r3, r2, r3
 80001be:	43da      	mvns	r2, r3
 80001c0:	484b      	ldr	r0, [pc, #300]	; (80002f0 <EXTI_GPIO_Inite+0x180>)
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	400a      	ands	r2, r1
 80001c6:	3302      	adds	r3, #2
 80001c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	PUT_VALUE_IN_REG(AFIO->EXTICR[Reg],Get_GPIO_Port(EXTI_Cfg->EXTI_pin.GPIOx),Position);
 80001cc:	4a48      	ldr	r2, [pc, #288]	; (80002f0 <EXTI_GPIO_Inite+0x180>)
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3302      	adds	r3, #2
 80001d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4a46      	ldr	r2, [pc, #280]	; (80002f4 <EXTI_GPIO_Inite+0x184>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d016      	beq.n	800020e <EXTI_GPIO_Inite+0x9e>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a44      	ldr	r2, [pc, #272]	; (80002f8 <EXTI_GPIO_Inite+0x188>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d00f      	beq.n	800020a <EXTI_GPIO_Inite+0x9a>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a43      	ldr	r2, [pc, #268]	; (80002fc <EXTI_GPIO_Inite+0x18c>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d008      	beq.n	8000206 <EXTI_GPIO_Inite+0x96>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a41      	ldr	r2, [pc, #260]	; (8000300 <EXTI_GPIO_Inite+0x190>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d101      	bne.n	8000202 <EXTI_GPIO_Inite+0x92>
 80001fe:	2303      	movs	r3, #3
 8000200:	e006      	b.n	8000210 <EXTI_GPIO_Inite+0xa0>
 8000202:	2300      	movs	r3, #0
 8000204:	e004      	b.n	8000210 <EXTI_GPIO_Inite+0xa0>
 8000206:	2302      	movs	r3, #2
 8000208:	e002      	b.n	8000210 <EXTI_GPIO_Inite+0xa0>
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <EXTI_GPIO_Inite+0xa0>
 800020e:	2300      	movs	r3, #0
 8000210:	7bba      	ldrb	r2, [r7, #14]
 8000212:	fa03 f202 	lsl.w	r2, r3, r2
 8000216:	4836      	ldr	r0, [pc, #216]	; (80002f0 <EXTI_GPIO_Inite+0x180>)
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	430a      	orrs	r2, r1
 800021c:	3302      	adds	r3, #2
 800021e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	//----------------Configure EXTI registers----------------

	//configure the edge trigger
	if(EXTI_Cfg->Edge_trigger==RISING_EDGE_TRIGGER)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	7b1b      	ldrb	r3, [r3, #12]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d10a      	bne.n	8000240 <EXTI_GPIO_Inite+0xd0>
	{
		SET_BIT(EXTI->RTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 800022a:	4b36      	ldr	r3, [pc, #216]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800022c:	689a      	ldr	r2, [r3, #8]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	4619      	mov	r1, r3
 8000234:	2301      	movs	r3, #1
 8000236:	408b      	lsls	r3, r1
 8000238:	4932      	ldr	r1, [pc, #200]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800023a:	4313      	orrs	r3, r2
 800023c:	608b      	str	r3, [r1, #8]
 800023e:	e026      	b.n	800028e <EXTI_GPIO_Inite+0x11e>
	}
	else if(EXTI_Cfg->Edge_trigger==FALLING_EDGE_TRIGGER)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	7b1b      	ldrb	r3, [r3, #12]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d10a      	bne.n	800025e <EXTI_GPIO_Inite+0xee>
	{
		SET_BIT(EXTI->FTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 8000248:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800024a:	68da      	ldr	r2, [r3, #12]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	2301      	movs	r3, #1
 8000254:	408b      	lsls	r3, r1
 8000256:	492b      	ldr	r1, [pc, #172]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 8000258:	4313      	orrs	r3, r2
 800025a:	60cb      	str	r3, [r1, #12]
 800025c:	e017      	b.n	800028e <EXTI_GPIO_Inite+0x11e>
	}
	else if(EXTI_Cfg->Edge_trigger==RISING_FALLING_EDGE_TRIGGER)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	7b1b      	ldrb	r3, [r3, #12]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d113      	bne.n	800028e <EXTI_GPIO_Inite+0x11e>
	{
		SET_BIT(EXTI->RTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 8000268:	689a      	ldr	r2, [r3, #8]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4619      	mov	r1, r3
 8000270:	2301      	movs	r3, #1
 8000272:	408b      	lsls	r3, r1
 8000274:	4923      	ldr	r1, [pc, #140]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 8000276:	4313      	orrs	r3, r2
 8000278:	608b      	str	r3, [r1, #8]
		SET_BIT(EXTI->FTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800027c:	68da      	ldr	r2, [r3, #12]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	2301      	movs	r3, #1
 8000286:	408b      	lsls	r3, r1
 8000288:	491e      	ldr	r1, [pc, #120]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800028a:	4313      	orrs	r3, r2
 800028c:	60cb      	str	r3, [r1, #12]
	}

	//Enable EXTI mask register
	SET_BIT(EXTI->IMR,EXTI_Cfg->EXTI_pin.Pin_number);
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4619      	mov	r1, r3
 8000298:	2301      	movs	r3, #1
 800029a:	408b      	lsls	r3, r1
 800029c:	4919      	ldr	r1, [pc, #100]	; (8000304 <EXTI_GPIO_Inite+0x194>)
 800029e:	4313      	orrs	r3, r2
 80002a0:	600b      	str	r3, [r1, #0]

	//Enable NVIC IRQ
	uint8_t NVIC_Set_Reg=(EXTI_Cfg->EXTI_pin.IRQ_Num)/32;			//hold the NVIC set register number
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7a1b      	ldrb	r3, [r3, #8]
 80002a6:	095b      	lsrs	r3, r3, #5
 80002a8:	737b      	strb	r3, [r7, #13]
	uint8_t NVIC_Set_Reg_position=(EXTI_Cfg->EXTI_pin.IRQ_Num)%32;	//hold the NVIC set register position
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	7a1b      	ldrb	r3, [r3, #8]
 80002ae:	f003 031f 	and.w	r3, r3, #31
 80002b2:	733b      	strb	r3, [r7, #12]
	SET_BIT(NVIC->Set_Enable_Register[NVIC_Set_Reg],NVIC_Set_Reg_position);
 80002b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80002b8:	7b7b      	ldrb	r3, [r7, #13]
 80002ba:	3340      	adds	r3, #64	; 0x40
 80002bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c0:	7b3b      	ldrb	r3, [r7, #12]
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80002ce:	7b7b      	ldrb	r3, [r7, #13]
 80002d0:	4302      	orrs	r2, r0
 80002d2:	3340      	adds	r3, #64	; 0x40
 80002d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Assign the function to be called during the interrupt
	P_Call_Back_EXTI[EXTI_Cfg->EXTI_pin.Pin_number]=(EXTI_Cfg->P_IRQ_Callback);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4619      	mov	r1, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <EXTI_GPIO_Inite+0x198>)
 80002e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010000 	.word	0x40010000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	40011000 	.word	0x40011000
 8000300:	40011400 	.word	0x40011400
 8000304:	40010400 	.word	0x40010400
 8000308:	20000020 	.word	0x20000020

0800030c <EXTI_GPIO_Update>:
 * @return value			-none
 * Note						-STM32f103 has A,B,C,D,E ports
 * 							 but LQFP48 only has A,B and part of C,D
 ********************************************/
void EXTI_GPIO_Update(EXTI_Pin_Cfg_t* EXTI_Cfg)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	if(EXTI_Cfg->Edge_trigger==RISING_EDGE_TRIGGER)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7b1b      	ldrb	r3, [r3, #12]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d115      	bne.n	8000348 <EXTI_GPIO_Update+0x3c>
	{
		SET_BIT(EXTI->RTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4619      	mov	r1, r3
 8000326:	2301      	movs	r3, #1
 8000328:	408b      	lsls	r3, r1
 800032a:	4927      	ldr	r1, [pc, #156]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 800032c:	4313      	orrs	r3, r2
 800032e:	608b      	str	r3, [r1, #8]
		CLEAR_BITS(EXTI->FTSR,EXTI_Cfg->EXTI_pin.Pin_number,1);
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4619      	mov	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
 800033e:	43db      	mvns	r3, r3
 8000340:	4921      	ldr	r1, [pc, #132]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000342:	4013      	ands	r3, r2
 8000344:	60cb      	str	r3, [r1, #12]
 8000346:	e031      	b.n	80003ac <EXTI_GPIO_Update+0xa0>
	}
	else if(EXTI_Cfg->Edge_trigger==FALLING_EDGE_TRIGGER)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	7b1b      	ldrb	r3, [r3, #12]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d115      	bne.n	800037c <EXTI_GPIO_Update+0x70>
	{
		SET_BIT(EXTI->FTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	2301      	movs	r3, #1
 800035c:	408b      	lsls	r3, r1
 800035e:	491a      	ldr	r1, [pc, #104]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000360:	4313      	orrs	r3, r2
 8000362:	60cb      	str	r3, [r1, #12]
		CLEAR_BITS(EXTI->RTSR,EXTI_Cfg->EXTI_pin.Pin_number,1);
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	4914      	ldr	r1, [pc, #80]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000376:	4013      	ands	r3, r2
 8000378:	608b      	str	r3, [r1, #8]
 800037a:	e017      	b.n	80003ac <EXTI_GPIO_Update+0xa0>
	}
	else if(EXTI_Cfg->Edge_trigger==RISING_FALLING_EDGE_TRIGGER)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	7b1b      	ldrb	r3, [r3, #12]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d113      	bne.n	80003ac <EXTI_GPIO_Update+0xa0>
	{
		SET_BIT(EXTI->RTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000386:	689a      	ldr	r2, [r3, #8]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	2301      	movs	r3, #1
 8000390:	408b      	lsls	r3, r1
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 8000394:	4313      	orrs	r3, r2
 8000396:	608b      	str	r3, [r1, #8]
		SET_BIT(EXTI->FTSR,EXTI_Cfg->EXTI_pin.Pin_number);
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4619      	mov	r1, r3
 80003a2:	2301      	movs	r3, #1
 80003a4:	408b      	lsls	r3, r1
 80003a6:	4908      	ldr	r1, [pc, #32]	; (80003c8 <EXTI_GPIO_Update+0xbc>)
 80003a8:	4313      	orrs	r3, r2
 80003aa:	60cb      	str	r3, [r1, #12]
	}

	//Assign the function to be called during the interrupt
	P_Call_Back_EXTI[EXTI_Cfg->EXTI_pin.Pin_number]=EXTI_Cfg->P_IRQ_Callback;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	691b      	ldr	r3, [r3, #16]
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <EXTI_GPIO_Update+0xc0>)
 80003b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40010400 	.word	0x40010400
 80003cc:	20000020 	.word	0x20000020

080003d0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <EXTI0_IRQHandler+0x1c>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <EXTI0_IRQHandler+0x1c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6153      	str	r3, [r2, #20]
	P_Call_Back_EXTI[0]();
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <EXTI0_IRQHandler+0x20>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4798      	blx	r3
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40010400 	.word	0x40010400
 80003f0:	20000020 	.word	0x20000020

080003f4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,1);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <EXTI1_IRQHandler+0x1c>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <EXTI1_IRQHandler+0x1c>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	6153      	str	r3, [r2, #20]
	P_Call_Back_EXTI[1]();
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <EXTI1_IRQHandler+0x20>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4798      	blx	r3
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010400 	.word	0x40010400
 8000414:	20000020 	.word	0x20000020

08000418 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,2);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <EXTI2_IRQHandler+0x1c>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <EXTI2_IRQHandler+0x1c>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6153      	str	r3, [r2, #20]
	P_Call_Back_EXTI[2]();
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <EXTI2_IRQHandler+0x20>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	4798      	blx	r3
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010400 	.word	0x40010400
 8000438:	20000020 	.word	0x20000020

0800043c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,3);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <EXTI3_IRQHandler+0x1c>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <EXTI3_IRQHandler+0x1c>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6153      	str	r3, [r2, #20]
	P_Call_Back_EXTI[3]();
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <EXTI3_IRQHandler+0x20>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4798      	blx	r3
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010400 	.word	0x40010400
 800045c:	20000020 	.word	0x20000020

08000460 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,4);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI4_IRQHandler+0x1c>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <EXTI4_IRQHandler+0x1c>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6153      	str	r3, [r2, #20]
	P_Call_Back_EXTI[4]();
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <EXTI4_IRQHandler+0x20>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	4798      	blx	r3
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010400 	.word	0x40010400
 8000480:	20000020 	.word	0x20000020

08000484 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI->PR,5)==1)
 8000488:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	115b      	asrs	r3, r3, #5
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	2b01      	cmp	r3, #1
 8000494:	d109      	bne.n	80004aa <EXTI9_5_IRQHandler+0x26>
	{
		SET_BIT(EXTI->PR,5);
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a26      	ldr	r2, [pc, #152]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[5]();
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <EXTI9_5_IRQHandler+0xb4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4798      	blx	r3
	else if (GET_BIT(EXTI->PR,9)==1)
	{
		SET_BIT(EXTI->PR,9);
		P_Call_Back_EXTI[9]();
	}
}
 80004a8:	e042      	b.n	8000530 <EXTI9_5_IRQHandler+0xac>
	else if (GET_BIT(EXTI->PR,6)==1)
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	119b      	asrs	r3, r3, #6
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d109      	bne.n	80004cc <EXTI9_5_IRQHandler+0x48>
		SET_BIT(EXTI->PR,6);
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c2:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[6]();
 80004c4:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <EXTI9_5_IRQHandler+0xb4>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4798      	blx	r3
}
 80004ca:	e031      	b.n	8000530 <EXTI9_5_IRQHandler+0xac>
	else if (GET_BIT(EXTI->PR,7)==1)
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	11db      	asrs	r3, r3, #7
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d109      	bne.n	80004ee <EXTI9_5_IRQHandler+0x6a>
		SET_BIT(EXTI->PR,7);
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e4:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[7]();
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <EXTI9_5_IRQHandler+0xb4>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4798      	blx	r3
}
 80004ec:	e020      	b.n	8000530 <EXTI9_5_IRQHandler+0xac>
	else if (GET_BIT(EXTI->PR,8)==1)
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	121b      	asrs	r3, r3, #8
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d109      	bne.n	8000510 <EXTI9_5_IRQHandler+0x8c>
		SET_BIT(EXTI->PR,8);
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[8]();
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <EXTI9_5_IRQHandler+0xb4>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4798      	blx	r3
}
 800050e:	e00f      	b.n	8000530 <EXTI9_5_IRQHandler+0xac>
	else if (GET_BIT(EXTI->PR,9)==1)
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	125b      	asrs	r3, r3, #9
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b01      	cmp	r3, #1
 800051c:	d108      	bne.n	8000530 <EXTI9_5_IRQHandler+0xac>
		SET_BIT(EXTI->PR,9);
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI9_5_IRQHandler+0xb0>)
 8000524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000528:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[9]();
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <EXTI9_5_IRQHandler+0xb4>)
 800052c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052e:	4798      	blx	r3
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010400 	.word	0x40010400
 8000538:	20000020 	.word	0x20000020

0800053c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI->PR,10)==1)
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	129b      	asrs	r3, r3, #10
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b01      	cmp	r3, #1
 800054c:	d109      	bne.n	8000562 <EXTI15_10_IRQHandler+0x26>
	{
		SET_BIT(EXTI->PR,10);
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a2f      	ldr	r2, [pc, #188]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000558:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[10]();
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 800055c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055e:	4798      	blx	r3
	else if (GET_BIT(EXTI->PR,15)==1)
	{
		SET_BIT(EXTI->PR,15);
		P_Call_Back_EXTI[15]();
	}
}
 8000560:	e053      	b.n	800060a <EXTI15_10_IRQHandler+0xce>
	else if (GET_BIT(EXTI->PR,11)==1)
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	12db      	asrs	r3, r3, #11
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b01      	cmp	r3, #1
 800056e:	d109      	bne.n	8000584 <EXTI15_10_IRQHandler+0x48>
		SET_BIT(EXTI->PR,11);
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a26      	ldr	r2, [pc, #152]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057a:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[11]();
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 800057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000580:	4798      	blx	r3
}
 8000582:	e042      	b.n	800060a <EXTI15_10_IRQHandler+0xce>
	else if (GET_BIT(EXTI->PR,12)==1)
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	131b      	asrs	r3, r3, #12
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b01      	cmp	r3, #1
 8000590:	d109      	bne.n	80005a6 <EXTI15_10_IRQHandler+0x6a>
		SET_BIT(EXTI->PR,12);
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 8000598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059c:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[12]();
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4798      	blx	r3
}
 80005a4:	e031      	b.n	800060a <EXTI15_10_IRQHandler+0xce>
	else if (GET_BIT(EXTI->PR,13)==1)
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	135b      	asrs	r3, r3, #13
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d109      	bne.n	80005c8 <EXTI15_10_IRQHandler+0x8c>
		SET_BIT(EXTI->PR,13);
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a15      	ldr	r2, [pc, #84]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005be:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[13]();
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 80005c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c4:	4798      	blx	r3
}
 80005c6:	e020      	b.n	800060a <EXTI15_10_IRQHandler+0xce>
	else if (GET_BIT(EXTI->PR,14)==1)
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	139b      	asrs	r3, r3, #14
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d109      	bne.n	80005ea <EXTI15_10_IRQHandler+0xae>
		SET_BIT(EXTI->PR,14);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[14]();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 80005e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e6:	4798      	blx	r3
}
 80005e8:	e00f      	b.n	800060a <EXTI15_10_IRQHandler+0xce>
	else if (GET_BIT(EXTI->PR,15)==1)
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	13db      	asrs	r3, r3, #15
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d108      	bne.n	800060a <EXTI15_10_IRQHandler+0xce>
		SET_BIT(EXTI->PR,15);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <EXTI15_10_IRQHandler+0xd4>)
 80005fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000602:	6153      	str	r3, [r2, #20]
		P_Call_Back_EXTI[15]();
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <EXTI15_10_IRQHandler+0xd8>)
 8000606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000608:	4798      	blx	r3
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40010400 	.word	0x40010400
 8000614:	20000020 	.word	0x20000020

08000618 <MCAL_GPIO_Init>:
 * Note						-STM32f103 has A,B,C,D,E ports
 * 							 but LQFP48 only has A,B and part of C,D
 ********************************************/

void MCAL_GPIO_Init(GPIO_TypeDef*GPIO_portX,GPIO_pin_configue_t*PinConfig)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	if(PinConfig->GPIO_pin_number<8)//the pins mode in the low register
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b07      	cmp	r3, #7
 8000628:	d85f      	bhi.n	80006ea <MCAL_GPIO_Init+0xd2>
	{
		//clear the four bits of the pin to be configured
		CLEAR_BITS(GPIO_portX->CRL,PinConfig->GPIO_pin_number*4,4);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	210f      	movs	r1, #15
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	401a      	ands	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]

		//configure the pin MODE bits
		PUT_VALUE_IN_REG(GPIO_portX->CRL,PinConfig->GPIO_pin_mode,PinConfig->GPIO_pin_number*4);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	4619      	mov	r1, r3
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	431a      	orrs	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	601a      	str	r2, [r3, #0]

		//configure the pin CNF bits

		//checking if the pin is input pull up or pull down
		if((PinConfig->GPIO_pin_mode==GPIO_MODE_INPUT) && (PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN||PinConfig->GPIO_pin_CNF==GPIO_IN_PULLUP))
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d132      	bne.n	80006ca <MCAL_GPIO_Init+0xb2>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	789b      	ldrb	r3, [r3, #2]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d003      	beq.n	8000674 <MCAL_GPIO_Init+0x5c>
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	789b      	ldrb	r3, [r3, #2]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d12a      	bne.n	80006ca <MCAL_GPIO_Init+0xb2>
		{

			PUT_VALUE_IN_REG(GPIO_portX->CRL,GPIO_IN_PULLUP_PULLDOWN,((PinConfig->GPIO_pin_number*4)+2));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	3302      	adds	r3, #2
 8000680:	2102      	movs	r1, #2
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	431a      	orrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d10b      	bne.n	80006ac <MCAL_GPIO_Init+0x94>
				GPIO_portX->ODR&=~(0x1<<PinConfig->GPIO_pin_number);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	2301      	movs	r3, #1
 80006a0:	408b      	lsls	r3, r1
 80006a2:	43db      	mvns	r3, r3
 80006a4:	401a      	ands	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60da      	str	r2, [r3, #12]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)
 80006aa:	e01d      	b.n	80006e8 <MCAL_GPIO_Init+0xd0>
			else if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLUP)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d119      	bne.n	80006e8 <MCAL_GPIO_Init+0xd0>
				GPIO_portX->ODR|=(0x1<<PinConfig->GPIO_pin_number);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	2301      	movs	r3, #1
 80006c0:	408b      	lsls	r3, r1
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	60da      	str	r2, [r3, #12]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)
 80006c8:	e00e      	b.n	80006e8 <MCAL_GPIO_Init+0xd0>
		}
		else
		{
		PUT_VALUE_IN_REG(GPIO_portX->CRL,PinConfig->GPIO_pin_CNF,((PinConfig->GPIO_pin_number*4)+2));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	4619      	mov	r1, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3302      	adds	r3, #2
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e000      	b.n	80006ea <MCAL_GPIO_Init+0xd2>
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)
 80006e8:	bf00      	nop
		}

	}
	if((PinConfig->GPIO_pin_number>=8)&&(PinConfig->GPIO_pin_number<16))//the pins mode in the high register
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d967      	bls.n	80007c2 <MCAL_GPIO_Init+0x1aa>
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d863      	bhi.n	80007c2 <MCAL_GPIO_Init+0x1aa>
	{
		//clear the four bits of the pin to be configured
		CLEAR_BITS(GPIO_portX->CRH,(PinConfig->GPIO_pin_number-8)*4,4);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3b08      	subs	r3, #8
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	210f      	movs	r1, #15
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	401a      	ands	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	605a      	str	r2, [r3, #4]

		//configure the pin MODE bits
		PUT_VALUE_IN_REG(GPIO_portX->CRH,PinConfig->GPIO_pin_mode,(PinConfig->GPIO_pin_number-8)*4);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	4619      	mov	r1, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3b08      	subs	r3, #8
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	431a      	orrs	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	605a      	str	r2, [r3, #4]

		//checking if the pin is input pull up or pull down
		if((PinConfig->GPIO_pin_mode==GPIO_MODE_INPUT) && (PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN||PinConfig->GPIO_pin_CNF==GPIO_IN_PULLUP))
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d133      	bne.n	80007a0 <MCAL_GPIO_Init+0x188>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d003      	beq.n	8000748 <MCAL_GPIO_Init+0x130>
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d12b      	bne.n	80007a0 <MCAL_GPIO_Init+0x188>
		{

			PUT_VALUE_IN_REG(GPIO_portX->CRH,GPIO_IN_PULLUP_PULLDOWN,(((PinConfig->GPIO_pin_number-8)*4)+2));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3b08      	subs	r3, #8
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	3302      	adds	r3, #2
 8000756:	2102      	movs	r1, #2
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	605a      	str	r2, [r3, #4]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)//if the pin is input with pull down resistance
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d10b      	bne.n	8000782 <MCAL_GPIO_Init+0x16a>
				GPIO_portX->ODR&=~(0x1<<PinConfig->GPIO_pin_number);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	2301      	movs	r3, #1
 8000776:	408b      	lsls	r3, r1
 8000778:	43db      	mvns	r3, r3
 800077a:	401a      	ands	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	60da      	str	r2, [r3, #12]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)//if the pin is input with pull down resistance
 8000780:	e01e      	b.n	80007c0 <MCAL_GPIO_Init+0x1a8>
			else if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLUP)//if the pin is input with pullup resistance
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	789b      	ldrb	r3, [r3, #2]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d11a      	bne.n	80007c0 <MCAL_GPIO_Init+0x1a8>
				GPIO_portX->ODR|=(0x1<<PinConfig->GPIO_pin_number);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	2301      	movs	r3, #1
 8000796:	408b      	lsls	r3, r1
 8000798:	431a      	orrs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	60da      	str	r2, [r3, #12]
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)//if the pin is input with pull down resistance
 800079e:	e00f      	b.n	80007c0 <MCAL_GPIO_Init+0x1a8>
		}
		else
		{
		PUT_VALUE_IN_REG(GPIO_portX->CRH,PinConfig->GPIO_pin_CNF,(((PinConfig->GPIO_pin_number-8)*4)+2));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	4619      	mov	r1, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b08      	subs	r3, #8
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	3302      	adds	r3, #2
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	431a      	orrs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
		}
	}

}
 80007be:	e000      	b.n	80007c2 <MCAL_GPIO_Init+0x1aa>
			if(PinConfig->GPIO_pin_CNF==GPIO_IN_PULLDOWN)//if the pin is input with pull down resistance
 80007c0:	bf00      	nop
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <MCAL_GPIO_TogglePin>:
	 * @return value			-none
	 * Note						-STM32f103 has A,B,C,D,E ports
	 * 							 but LQFP48 only has A,B and part of C,D
	 ********************************************/
	void MCAL_GPIO_TogglePin (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber)
	{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
		TOGGLE_BIT(GPIO_PortX->ODR,PinNumber);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	405a      	eors	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60da      	str	r2, [r3, #12]
	}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <fun_0>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "EXTI.h"
uint8_t flag=4;//possible values @ref flag values
void fun_0(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	MCAL_GPIO_TogglePin(GPIO_PORTB,GPIO_PIN_0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <fun_0+0x30>)
 80007fc:	f7ff ffe6 	bl	80007cc <MCAL_GPIO_TogglePin>
	if (flag==3)flag=2;			//check if the previous configuration is FALLING_EDGE_TRIGGER
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <fun_0+0x34>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d103      	bne.n	8000810 <fun_0+0x1c>
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <fun_0+0x34>)
 800080a:	2202      	movs	r2, #2
 800080c:	701a      	strb	r2, [r3, #0]
	else if(flag==4)flag=1;		//check if the previous configuration is RISING_EDGE_TRIGGER
}
 800080e:	e006      	b.n	800081e <fun_0+0x2a>
	else if(flag==4)flag=1;		//check if the previous configuration is RISING_EDGE_TRIGGER
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <fun_0+0x34>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b04      	cmp	r3, #4
 8000816:	d102      	bne.n	800081e <fun_0+0x2a>
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <fun_0+0x34>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010c00 	.word	0x40010c00
 8000828:	20000000 	.word	0x20000000

0800082c <main>:
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
	RCC_GPIO_PORTA_CLK_EN();
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <main+0x94>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <main+0x94>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6193      	str	r3, [r2, #24]
	RCC_GPIO_PORTB_CLK_EN();
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <main+0x94>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <main+0x94>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <main+0x94>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <main+0x94>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
	GPIO_pin_configue_t PB0;
	PB0.GPIO_pin_number=GPIO_PIN_0;
 8000856:	2300      	movs	r3, #0
 8000858:	753b      	strb	r3, [r7, #20]
	PB0.GPIO_pin_mode=GPIO_MODE_OUTPUT_10M;
 800085a:	2301      	movs	r3, #1
 800085c:	757b      	strb	r3, [r7, #21]
	PB0.GPIO_pin_CNF=GPIO_OUT_PUSHPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_Init(GPIO_PORTB,&PB0);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <main+0x98>)
 800086a:	f7ff fed5 	bl	8000618 <MCAL_GPIO_Init>

	EXTI_Pin_Cfg_t test;
	test.EXTI_pin=EXTI1_PB1;
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <main+0x9c>)
 8000870:	463b      	mov	r3, r7
 8000872:	ca07      	ldmia	r2, {r0, r1, r2}
 8000874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	test.Edge_trigger=RISING_EDGE_TRIGGER;
 8000878:	2300      	movs	r3, #0
 800087a:	733b      	strb	r3, [r7, #12]
	test.P_IRQ_Callback=fun_0;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <main+0xa0>)
 800087e:	613b      	str	r3, [r7, #16]
	EXTI_GPIO_Inite(&test);
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc74 	bl	8000170 <EXTI_GPIO_Inite>

	/* Loop forever */
	while(1)
	{
		if(flag==1)
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <main+0xa4>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d109      	bne.n	80008a4 <main+0x78>
		{
			test.Edge_trigger=FALLING_EDGE_TRIGGER;
 8000890:	2301      	movs	r3, #1
 8000892:	733b      	strb	r3, [r7, #12]
			flag=3;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <main+0xa4>)
 8000896:	2203      	movs	r2, #3
 8000898:	701a      	strb	r2, [r3, #0]
			EXTI_GPIO_Update(&test);
 800089a:	463b      	mov	r3, r7
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd35 	bl	800030c <EXTI_GPIO_Update>
 80008a2:	e7f1      	b.n	8000888 <main+0x5c>
		}
		else if(flag==2)
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <main+0xa4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d1ed      	bne.n	8000888 <main+0x5c>
		{
			test.Edge_trigger=RISING_EDGE_TRIGGER;
 80008ac:	2300      	movs	r3, #0
 80008ae:	733b      	strb	r3, [r7, #12]
			EXTI_GPIO_Update(&test);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fd2a 	bl	800030c <EXTI_GPIO_Update>
			flag=4;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <main+0xa4>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	701a      	strb	r2, [r3, #0]
		if(flag==1)
 80008be:	e7e3      	b.n	8000888 <main+0x5c>
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	08000988 	.word	0x08000988
 80008cc:	080007f5 	.word	0x080007f5
 80008d0:	20000000 	.word	0x20000000

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f000 f811 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff ff91 	bl	800082c <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000918:	0800099c 	.word	0x0800099c
  ldr r2, =_sbss
 800091c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000920:	20000060 	.word	0x20000060

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	2500      	movs	r5, #0
 800092c:	4e0c      	ldr	r6, [pc, #48]	; (8000960 <__libc_init_array+0x38>)
 800092e:	4c0d      	ldr	r4, [pc, #52]	; (8000964 <__libc_init_array+0x3c>)
 8000930:	1ba4      	subs	r4, r4, r6
 8000932:	10a4      	asrs	r4, r4, #2
 8000934:	42a5      	cmp	r5, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	f000 f81a 	bl	8000970 <_init>
 800093c:	2500      	movs	r5, #0
 800093e:	4e0a      	ldr	r6, [pc, #40]	; (8000968 <__libc_init_array+0x40>)
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <__libc_init_array+0x44>)
 8000942:	1ba4      	subs	r4, r4, r6
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	42a5      	cmp	r5, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000950:	4798      	blx	r3
 8000952:	3501      	adds	r5, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095a:	4798      	blx	r3
 800095c:	3501      	adds	r5, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	08000994 	.word	0x08000994
 8000964:	08000994 	.word	0x08000994
 8000968:	08000994 	.word	0x08000994
 800096c:	08000998 	.word	0x08000998

08000970 <_init>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr

0800097c <_fini>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr
