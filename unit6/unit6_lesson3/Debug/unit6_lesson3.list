
unit6_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000df  00000000  00000000  00010371  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000008f  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000104e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f2c  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000044a  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003bc9  00000000  00000000  000118de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000154a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00015524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000328 	.word	0x08000328

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000328 	.word	0x08000328

08000170 <clock_init>:
#define RCC_APB2ENR			*(volatile uint32_t*)(RCC_BASE+0x18)
#define RCC_CFGR			*(volatile uint32_t*)(RCC_BASE+0x04)
#define RCC_CR			*(volatile uint32_t*)(RCC_BASE+0x00)

void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
00: HSI selected as system clock
01: HSE selected as system clock
10: PLL selected as system clock
11: not allowed
	 */
	RCC_CFGR&=(3);
 8000174:	4b1f      	ldr	r3, [pc, #124]	; (80001f4 <clock_init+0x84>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <clock_init+0x84>)
 800017a:	f003 0303 	and.w	r3, r3, #3
 800017e:	6013      	str	r3, [r2, #0]
	RCC_CFGR|=(2);
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <clock_init+0x84>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a1b      	ldr	r2, [pc, #108]	; (80001f4 <clock_init+0x84>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6013      	str	r3, [r2, #0]
	1011: PLL input clock x 13
	1100: PLL input clock x 14
	1101: PLL input clock x 15
	1110: PLL input clock x 16
	1111: PLL input clock x 16*/
	RCC_CFGR&=~(0xf<<18);
 800018c:	4b19      	ldr	r3, [pc, #100]	; (80001f4 <clock_init+0x84>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a18      	ldr	r2, [pc, #96]	; (80001f4 <clock_init+0x84>)
 8000192:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000196:	6013      	str	r3, [r2, #0]
	RCC_CFGR|=(0b0110<<18);
 8000198:	4b16      	ldr	r3, [pc, #88]	; (80001f4 <clock_init+0x84>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a15      	ldr	r2, [pc, #84]	; (80001f4 <clock_init+0x84>)
 800019e:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001a2:	6013      	str	r3, [r2, #0]
	/*Bit 16 PLLSRC: PLL entry clock source
	Set and cleared by software to select PLL clock source. This bit can be written only when
	PLL is disabled.
	0: HSI oscillator clock / 2 selected as PLL input clock
	1: HSE oscillator clock selected as PLL input clock*/
	RCC_CFGR&=~(1<<16);
 80001a4:	4b13      	ldr	r3, [pc, #76]	; (80001f4 <clock_init+0x84>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a12      	ldr	r2, [pc, #72]	; (80001f4 <clock_init+0x84>)
 80001aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ae:	6013      	str	r3, [r2, #0]
	0xx: HCLK not divided
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	RCC_CFGR&=~(0x7<<11);
 80001b0:	4b10      	ldr	r3, [pc, #64]	; (80001f4 <clock_init+0x84>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0f      	ldr	r2, [pc, #60]	; (80001f4 <clock_init+0x84>)
 80001b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80001ba:	6013      	str	r3, [r2, #0]
	RCC_CFGR|=(0b101<<11);
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <clock_init+0x84>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <clock_init+0x84>)
 80001c2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001c6:	6013      	str	r3, [r2, #0]
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16
	 */
	RCC_CFGR&=~(0x7<<8);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <clock_init+0x84>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <clock_init+0x84>)
 80001ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001d2:	6013      	str	r3, [r2, #0]
	RCC_CFGR|=(0b100<<8);
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <clock_init+0x84>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <clock_init+0x84>)
 80001da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001de:	6013      	str	r3, [r2, #0]
1100: SYSCLK divided by 64
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512
	 */
	RCC_CFGR&=~(0x7<<4);
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <clock_init+0x84>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a03      	ldr	r2, [pc, #12]	; (80001f4 <clock_init+0x84>)
 80001e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80001ea:	6013      	str	r3, [r2, #0]
Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
PLL clock is used as system clock or is selected to become the system clock.
0: PLL OFF
1: PLL ON
	 */
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40021004 	.word	0x40021004

080001f8 <main>:
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	clock_init();
 80001fe:	f7ff ffb7 	bl	8000170 <clock_init>

	RCC_CR|=(1<<24);
 8000202:	4b1e      	ldr	r3, [pc, #120]	; (800027c <main+0x84>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a1d      	ldr	r2, [pc, #116]	; (800027c <main+0x84>)
 8000208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800020c:	6013      	str	r3, [r2, #0]

	RCC_APB2ENR|=(1<<2);
 800020e:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <main+0x88>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <main+0x88>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6013      	str	r3, [r2, #0]
	GPIOA_CRH&=0xff0fffff;
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <main+0x8c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a19      	ldr	r2, [pc, #100]	; (8000284 <main+0x8c>)
 8000220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOA_CRH|=0x00200000;
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <main+0x8c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a16      	ldr	r2, [pc, #88]	; (8000284 <main+0x8c>)
 800022c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000230:	6013      	str	r3, [r2, #0]

	/* Loop forever */
	int i=0;
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
	while(1)
	{
		GPIOA_ODR|=1<<13;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <main+0x90>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <main+0x90>)
 800023c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000240:	6013      	str	r3, [r2, #0]
		for(i=0;i<5000;i++);
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e002      	b.n	800024e <main+0x56>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f241 3287 	movw	r2, #4999	; 0x1387
 8000254:	4293      	cmp	r3, r2
 8000256:	ddf7      	ble.n	8000248 <main+0x50>
		GPIOA_ODR&=~(1<<13);
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <main+0x90>)
 800025e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000262:	6013      	str	r3, [r2, #0]
		for(i=0;i<5000;i++);
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e002      	b.n	8000270 <main+0x78>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f241 3287 	movw	r2, #4999	; 0x1387
 8000276:	4293      	cmp	r3, r2
 8000278:	ddf7      	ble.n	800026a <main+0x72>
		GPIOA_ODR|=1<<13;
 800027a:	e7dc      	b.n	8000236 <main+0x3e>
 800027c:	40021000 	.word	0x40021000
 8000280:	40021018 	.word	0x40021018
 8000284:	40010804 	.word	0x40010804
 8000288:	4001080c 	.word	0x4001080c

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff9b 	bl	80001f8 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC1_2_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2500      	movs	r5, #0
 80002e4:	4e0c      	ldr	r6, [pc, #48]	; (8000318 <__libc_init_array+0x38>)
 80002e6:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e8:	1ba4      	subs	r4, r4, r6
 80002ea:	10a4      	asrs	r4, r4, #2
 80002ec:	42a5      	cmp	r5, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	f000 f81a 	bl	8000328 <_init>
 80002f4:	2500      	movs	r5, #0
 80002f6:	4e0a      	ldr	r6, [pc, #40]	; (8000320 <__libc_init_array+0x40>)
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <__libc_init_array+0x44>)
 80002fa:	1ba4      	subs	r4, r4, r6
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000308:	4798      	blx	r3
 800030a:	3501      	adds	r5, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000312:	4798      	blx	r3
 8000314:	3501      	adds	r5, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
