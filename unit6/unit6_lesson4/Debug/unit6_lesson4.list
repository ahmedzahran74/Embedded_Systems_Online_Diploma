
unit6_lesson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000368  08000370  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000368  08000368  00010370  2**0
                  CONTENTS
  4 .ARM          00000000  08000368  08000368  00010370  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000368  08000370  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000370  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000370  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ab6  00000000  00000000  00010399  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000300  00000000  00000000  00010e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  00011150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  00011200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e9b  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000dc4  00000000  00000000  00013113  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008175  00000000  00000000  00013ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001c04c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000154  00000000  00000000  0001c0c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000350 	.word	0x08000350

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000350 	.word	0x08000350

08000170 <GPIO_init>:

void(*EXTI0_ISR)()=NULL;


void GPIO_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable GPIOA clock
	RCC_APB2ENR|=(1<<2);
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <GPIO_init+0x54>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <GPIO_init+0x54>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	//enable AFIO clock
	RCC_APB2ENR|=(1<<0);
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <GPIO_init+0x54>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0f      	ldr	r2, [pc, #60]	; (80001c4 <GPIO_init+0x54>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
	//configure pin 13 as an output
	GPIO_CRH&=0xFF0FFFFF;
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <GPIO_init+0x58>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <GPIO_init+0x58>)
 8000192:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000196:	6013      	str	r3, [r2, #0]
	GPIO_CRH|=0x00200000;
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <GPIO_init+0x58>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <GPIO_init+0x58>)
 800019e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a2:	6013      	str	r3, [r2, #0]
	//configure pin 0 as an input
	GPIO_CRL&=0xFFFFFFFC;
 80001a4:	4b09      	ldr	r3, [pc, #36]	; (80001cc <GPIO_init+0x5c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a08      	ldr	r2, [pc, #32]	; (80001cc <GPIO_init+0x5c>)
 80001aa:	f023 0303 	bic.w	r3, r3, #3
 80001ae:	6013      	str	r3, [r2, #0]
	GPIO_CRL|=(1<<2);
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <GPIO_init+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a05      	ldr	r2, [pc, #20]	; (80001cc <GPIO_init+0x5c>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6013      	str	r3, [r2, #0]

}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40021018 	.word	0x40021018
 80001c8:	40010804 	.word	0x40010804
 80001cc:	40010800 	.word	0x40010800

080001d0 <EXTI_init>:
void EXTI_init(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//AFIO configuration

	AFIO_EXTICR1&=~(0xF);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <EXTI_init+0x3c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <EXTI_init+0x3c>)
 80001da:	f023 030f 	bic.w	r3, r3, #15
 80001de:	6013      	str	r3, [r2, #0]

	//Enable rising edge triggering
	EXTI_RTSR|=(1<<0);
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <EXTI_init+0x40>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <EXTI_init+0x40>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]

	//enable interrupt mask register for line 0
	EXTI_IMR|=1<<0;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <EXTI_init+0x44>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <EXTI_init+0x44>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6013      	str	r3, [r2, #0]

	//NVIC interrupt enable
	NVIC_ISER0|=(1<<6);
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <EXTI_init+0x48>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <EXTI_init+0x48>)
 80001fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	4001000c 	.word	0x4001000c
 8000210:	40010408 	.word	0x40010408
 8000214:	40010400 	.word	0x40010400
 8000218:	e000e100 	.word	0xe000e100

0800021c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	if (EXTI0_ISR!=NULL)
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <EXTI0_IRQHandler+0x18>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <EXTI0_IRQHandler+0x12>
	{
		EXTI0_ISR();
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <EXTI0_IRQHandler+0x18>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4798      	blx	r3
	}
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000001c 	.word	0x2000001c

08000238 <Assign_GPIO_ISR_Fun>:

#include "app_trigger.h"
#include "GPIO.h"

void Assign_GPIO_ISR_Fun(void(*ptr)(void))
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	EXTI0_ISR=ptr;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <Assign_GPIO_ISR_Fun+0x18>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	2000001c 	.word	0x2000001c

08000254 <GPIO_ISR_Fun>:
void GPIO_ISR_Fun(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	//Toggle pin 13 port A
	GPIO_ODR^=(1<<13);
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <GPIO_ISR_Fun+0x24>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <GPIO_ISR_Fun+0x24>)
 800025e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000262:	6013      	str	r3, [r2, #0]
	//clear pending request
	EXTI_PR|=(1<<0);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <GPIO_ISR_Fun+0x28>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <GPIO_ISR_Fun+0x28>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	4001080c 	.word	0x4001080c
 800027c:	40010414 	.word	0x40010414

08000280 <App_1>:
void App_1(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	Assign_GPIO_ISR_Fun(GPIO_ISR_Fun);
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <App_1+0x10>)
 8000286:	f7ff ffd7 	bl	8000238 <Assign_GPIO_ISR_Fun>

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	08000255 	.word	0x08000255

08000294 <main>:
 */
#include "app_trigger.h"
#include "GPIO.h"
void system_init(void);
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	system_init();
 8000298:	f000 f803 	bl	80002a2 <system_init>
	App_1();
 800029c:	f7ff fff0 	bl	8000280 <App_1>
	while(1);
 80002a0:	e7fe      	b.n	80002a0 <main+0xc>

080002a2 <system_init>:
}
void system_init(void)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	af00      	add	r7, sp, #0
	GPIO_init();
 80002a6:	f7ff ff63 	bl	8000170 <GPIO_init>
	EXTI_init();
 80002aa:	f7ff ff91 	bl	80001d0 <EXTI_init>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 f811 	bl	8000308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffd5 	bl	8000294 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f8:	08000370 	.word	0x08000370
  ldr r2, =_sbss
 80002fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000300:	20000020 	.word	0x20000020

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <__libc_init_array>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	2500      	movs	r5, #0
 800030c:	4e0c      	ldr	r6, [pc, #48]	; (8000340 <__libc_init_array+0x38>)
 800030e:	4c0d      	ldr	r4, [pc, #52]	; (8000344 <__libc_init_array+0x3c>)
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	42a5      	cmp	r5, r4
 8000316:	d109      	bne.n	800032c <__libc_init_array+0x24>
 8000318:	f000 f81a 	bl	8000350 <_init>
 800031c:	2500      	movs	r5, #0
 800031e:	4e0a      	ldr	r6, [pc, #40]	; (8000348 <__libc_init_array+0x40>)
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <__libc_init_array+0x44>)
 8000322:	1ba4      	subs	r4, r4, r6
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	42a5      	cmp	r5, r4
 8000328:	d105      	bne.n	8000336 <__libc_init_array+0x2e>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000330:	4798      	blx	r3
 8000332:	3501      	adds	r5, #1
 8000334:	e7ee      	b.n	8000314 <__libc_init_array+0xc>
 8000336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800033a:	4798      	blx	r3
 800033c:	3501      	adds	r5, #1
 800033e:	e7f2      	b.n	8000326 <__libc_init_array+0x1e>
 8000340:	08000368 	.word	0x08000368
 8000344:	08000368 	.word	0x08000368
 8000348:	08000368 	.word	0x08000368
 800034c:	0800036c 	.word	0x0800036c

08000350 <_init>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

0800035c <_fini>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr
